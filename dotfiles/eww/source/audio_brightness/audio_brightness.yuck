(defwidget audio_brightness [?transpose]
  (box
    :class "widget_block ${transpose == true ? "vertical" : "horizontal"} audio_brightness"
    :orientation {transpose == true ? "v" : "h"}
    :valign "center"
    :halign "center"
    :space-evenly false
    :spacing 5
    (speaker :transpose transpose)
    (mic :transpose transpose)
    (brightness :transpose transpose)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Audio
(deflisten sink_volume :initial '{"left":0,"right":0,"balance":0.00,"mute":false}' `./audio_brightness/audio_get_volume.sh sink subscribe`)
(defvar reveal_speaker false)
(defwidget speaker [?transpose]
  (eventbox
    :timeout "3000ms"
    :class "icon_block"
    :onhover "${EWW_CMD} update reveal_speaker=true"
    :onhoverlost "${EWW_CMD} update reveal_speaker=false"
    :onscroll "${EWW_CONFIG_DIR}/audio_brightness/audio_set_volume.sh sink {} 5 ${sink_volume.left}"
    :onclick "${EWW_CONFIG_DIR}/audio_brightness/audio_set_volume.sh sink mute"
    :onrightclick '${EWW_CMD} update device_type="sink" \
      & ${EWW_CONFIG_DIR}/audio_brightness/audio_query.sh sinks ${EWW_CMD} \
      & ${EWW_CONFIG_DIR}/panel_opener.sh audio_panel \
      ${transpose == true ? "vertical" : "horizontal"} ${EWW_CMD}'
    :cursor "pointer"
    (overlay
      (revealer 
        :transition "crossfade"
        :reveal reveal_speaker
        :duration "300ms"
        (label
          :width 30
          :height 30
          :class "speaker text ${sink_volume.mute ? "muted" : ""}"
          :text "${sink_volume.left}"))
      (revealer
        :transition "crossfade"
        :reveal {! reveal_speaker}
        :duration "300ms"
        (label
          :class "speaker icon ${sink_volume.mute ? "muted" : ""}"
          :width 30
          :height 30
          :text {sink_volume.mute ? "󰝟" : "󰕾"})))))


(deflisten source_volume :initial '{"left":0,"right":0,"balance":0.00,"mute":false}' `./audio_brightness/audio_get_volume.sh source subscribe`)
(defvar reveal_mic false)
(defwidget mic [?transpose]
  (eventbox
    :timeout "3000ms"
    :class "icon_block"
    :onhover "${EWW_CMD} update reveal_mic=true"
    :onhoverlost "${EWW_CMD} update reveal_mic=false"
    :onscroll "${EWW_CONFIG_DIR}/audio_brightness/audio_set_volume.sh source {} 5 ${source_volume.left}"
    :onclick "${EWW_CONFIG_DIR}/audio_brightness/audio_set_volume.sh source mute"
    :onrightclick '${EWW_CMD} update device_type="source" \
      & ${EWW_CONFIG_DIR}/audio_brightness/audio_query.sh sources ${EWW_CMD} \
      & ${EWW_CONFIG_DIR}/panel_opener.sh audio_panel \
      ${transpose == true ? "vertical" : "horizontal"} ${EWW_CMD}'
    :cursor "pointer"
    (overlay
      (revealer 
        :transition "crossfade"
        :reveal reveal_mic
        :duration "300ms"
        (label
          :width 30
          :height 30
          :class "mic text ${source_volume.mute ? "muted" : ""}"
          :text "${source_volume.left}"))
      (revealer
        :transition "crossfade"
        :reveal {! reveal_mic}
        :duration "300ms"
        (label
          :class "mic icon ${source_volume.mute ? "muted" : ""}"
          :width 30
          :height 30
          :text {source_volume.mute ? "" : ""})))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Audio panel
(defwindow audio_panel_horizontal
  :monitor 0
  :stacking "fg"
  :geometry (geometry :anchor "top right" :x -15 :y 50 :width "0px" :height "500px")
  (audio_panel))

(defwindow audio_panel_vertical
  :monitor 0
  :stacking "fg"
  :geometry (geometry :anchor "bottom left" :x 10 :y 10 :width "0px" :height "500px")
  (audio_panel))

(defvar default_device "")
(defvar devices "[]")
(defvar reveal_devices true)
(defvar device_type "sink")
(defwidget audio_panel []
  (box
    :width 400
    :valign "fill"
    :halign "fill"
    :space-evenly false
    :class "widget_panel audio_brightness"
    :orientation "v"
    (audio_panel_wheel)
    (box :height 20)
    (box
      :spacing 10
      (button
        :timeout "1s"
        :onclick '${EWW_CONFIG_DIR}/audio_brightness/audio_query.sh sinks ${EWW_CMD} \
          && ${EWW_CMD} update device_type="sink"'
        :class "button ${device_type == "sink" ? "selected" : ""}"
        (label :text "Sinks" :class "label"))
      (button
        :timeout "1s"
        :onclick '${EWW_CONFIG_DIR}/audio_brightness/audio_query.sh sources ${EWW_CMD} \
          && ${EWW_CMD} update device_type="source"'
        :class "button ${device_type == "source" ? "selected" : ""}"
        (label :text "Sources" :class "label")))
    (box
      :height 5
      :space-evenly false
      (box 
        :class "border_box ${device_type == "sink" ? "selected" : ""}" 
        :hexpand true)
      (box 
        :class "border_box" 
        :width 12)
      (box 
        :class "border_box ${device_type == "source" ? "selected" : ""}" 
        :hexpand true))
    (revealer
      :vexpand true
      :transition "crossfade"
      :duration "200ms"
      :reveal reveal_devices
      (scroll
        :vscroll true
        :class "dev_list"
        (audio_devices)))))

(defwidget audio_devices []
  (box
    (box
      :space-evenly false
      :orientation "v"
      :spacing 20
      (for dev in devices
        (dev_entry :dev "${dev}")))))

(defwidget dev_entry [dev]
  (box
    :halign "start"
    :class "dev_entry"
    :height 60
    :space-evenly false
    :spacing 5
    (overlay
      (box
        :width 30
        :height 30)
      (button
        :width 20
        :height 20
        :valign "center"
        :halign "center"
        :class "button ${dev.name == default_device[device_type] ? "selected" : ""}"
        :onclick "pactl set-default-${device_type} ${dev.name} \
          && ${EWW_CONFIG_DIR}/audio_brightness/audio_query.sh ${device_type}s ${EWW_CMD}")
      (label
        :class "checkmark icon"
        :text "${dev.name == default_device[device_type] ? "󰄬" : ""}"))
    (box :class "separator" :width 5)
    (label
      :xalign 0
      :class "label"
      :text "${dev.description}"
      :wrap true
      :limit-width 100)))
    
      

(defwidget audio_panel_wheel []
  (overlay
    :valign "center"
    :halign "center"
    (circular-progress
      :width 160
      :height 160
      :value 0.4
      :class "circle"
      :start-at 74.8
      :thickness 20)
    (circular-progress
      :width 160
      :height 160
      :value {sink_volume.left >= 99 ? "49.8" : "${sink_volume.left / 2}"}
      :class "speaker ${sink_volume.mute ? "muted" : ""}"
      :start-at 25
      :thickness 20)
    (circular-progress
      :width 160
      :height 160
      :value {source_volume.left >= 99 ? "49.8" : "${source_volume.left / 2}"}
      :class "mic ${source_volume.mute ? "muted" : ""}"
      :start-at 25
      :clockwise false
      :thickness 20)
    (circular-progress
      :width 160
      :height 160
      :value 0.4
      :class "circle_top"
      :start-at 24.8
      :thickness 20)
    (box
      :width 80
      :height 70
      :valign "center"
      :halign "center"
      :orientation "v"
      (label :class "audio kanji" :text "音響")
      (box
        (label :class "speaker kanji" :text "出")
        (label :class "mic kanji" :text "入")))
    (box
      :width 140
      :height 140
      :valign "fill"
      :halign "fill"
      :orientation "h"
      (eventbox
        :cursor "pointer"
        :onscroll "${EWW_CONFIG_DIR}/audio_brightness/audio_set_volume.sh sink {} 5 ${sink_volume.left}"
        :onclick "${EWW_CONFIG_DIR}/audio_brightness/audio_set_volume.sh sink mute")
      (eventbox
        :cursor "pointer"
        :onscroll "${EWW_CONFIG_DIR}/audio_brightness/audio_set_volume.sh source {} 5 ${source_volume.left}"
        :onclick "${EWW_CONFIG_DIR}/audio_brightness/audio_set_volume.sh source mute"))))

    
 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Brightness
(defvar brightness "0")
(defvar reveal_brightness false)
(defwidget brightness [?transpose]
  (eventbox
    :class "icon_block"
    :onhover '${EWW_CMD} update brightness=$(( $(brightnessctl g) * 100 / $(brightnessctl m) )) \
      && ${EWW_CMD} update reveal_brightness=true'
    :onhoverlost "${EWW_CMD} update reveal_brightness=false"
    :onscroll "if [ '{}' == 'up' ]; then brightnessctl -q set 2%+; \
               elif [ $((${brightness} - 2)) -ge 10 ]; then brightnessctl -q set 2%-; \
               else brightnessctl -q set 10%; fi \
      && ${EWW_CMD} update brightness=$(( $(brightnessctl g) * 100 / $(brightnessctl m) ))"
    :cursor "pointer"
    (overlay
      (revealer 
        :transition "crossfade"
        :reveal reveal_brightness
        :duration "300ms"
        (label
          :width 30
          :height 30
          :class "brightness text"
          :text "${brightness}"))
      (revealer
        :transition "crossfade"
        :reveal {! reveal_brightness}
        :duration "300ms"
        (label
          :class "brightness icon"
          :width 30
          :height 30
          :text "󰃠")))))

