(defvar wifi_msg "")
(defwidget network [?transpose]
  (box
    :class "widget_block ${transpose == true ? "vertical" : "horizontal"} network"
    :orientation {transpose == true ? "v" : "h"}
    :halign "center"
    :valign "center"
    (wifi :transpose transpose)))

(defpoll wifi_info
  :interval "40s"
  `bash ~/.config/eww/network/query_wifi_info.sh`)
(defvar wifi_bars 0)
(defvar bars_animation false)
(defwidget wifi [?transpose]
  (eventbox
    :class "wifi"
    :cursor "pointer"
    :width 30
    :height 30
    :onrightclick "${EWW_CONFIG_DIR}/panel_opener.sh wifi_panel \
      ${transpose == true ? "vertical" : "horizontal"} eww"
    (label
      :class "icon"
      :text "直")))

(defwindow wifi_panel_horizontal
  :monitor 0
  :stacking "fg"
  :geometry (geometry :anchor "top left" :x 1000 :y 5 :width "400px" :height "600px")
  :focusable true
  (wifi_panel :transpose false))

(defwindow wifi_panel_vertical
  :monitor 0
  :stacking "fg"
  :geometry (geometry :anchor "bottom left" :x 10 :y 10 :width "400px" :height "600px")
  :focusable true
  (wifi_panel :transpose true))
      
(defwidget wifi_panel [?transpose]
  (box
    :width 300
    :class "widget_panel wifi"
    :space-evenly false
    :orientation "v"
    :spacing 10
    (input ;; invisible widget to couple wifi_info and wifi_bars
      :visible false
      :value {bars_animation ? "${wifi_bars}" : "${wifi_info.bars}"}
      :onchange '${EWW_CONFIG_DIR}/network/wifi_bars_animator.sh \
        {} ${bars_animation} ${EWW_CMD} &') 
    (box
      :class "title"
      :space-evenly false
      :valign "center"
      :spacing 20
      (box :hexpand true)
      (box :class "bar left ${wifi_bars >= 4 ? "up" : "down"}")
      (box :class "bar left ${wifi_bars >= 3 ? "up" : "down"}")
      (box :class "bar left ${wifi_bars >= 2 ? "up" : "down"}")
      (box :class "bar left ${wifi_bars >= 1 ? "up" : "down"}")
      (label
        :class "kanji"
        :text "無線")
      (box :class "bar right ${wifi_bars >= 1 ? "up" : "down"}")
      (box :class "bar right ${wifi_bars >= 2 ? "up" : "down"}")
      (box :class "bar right ${wifi_bars >= 3 ? "up" : "down"}")
      (box :class "bar right ${wifi_bars >= 4 ? "up" : "down"}")
      ; (box :hexpand true)
      (eventbox
        :cursor "pointer"
        :hexpand true
        :style "font-size: 80%;"
        :onclick "${EWW_CONFIG_DIR}/panel_opener.sh wifi_panel \
          ${transpose == true ? "vertical" : "horizontal"} eww"
        (label
          :class "icon"
          :text "")))

    (scroll
      :vexpand true
      :vscroll true
      :hscroll false
      (box
        :orientation "v"
        :valign "start"
        :space-evenly false
        (for entry in "${wifi_info.entries}"
          (wifi_entry :entry entry))))
    (entry_handler)
    (eventbox
      :class "messages"
      :onclick '${EWW_CMD} update wifi_msg=""'
      :visible {wifi_msg != ""}
      (box
        :orientation "v"
        :space-evenly false
        (label
          :class "label"
          :xalign 0
          :text "Error: (click to dismiss)")
        (label
          :class "label"
          :xalign 0
          :wrap true
          :text wifi_msg)))))

(defvar expanded_entry "{}")
(defvar signal_symbol '["▂___","▂▄__","▂▄▆_","▂▄▆█"]')
(defvar entry_type '{
  "WPA1 WPA2":"entry_wpa_personal",
  "WPA2":"entry_wpa_personal",
  "WPA2 802.1X":"entry_wpa_enterprise",
  "known":"entry_known",
  "":"entry_no_security",
  "null":"entry_invisible"}')

(defwidget wifi_entry [entry]
  (eventbox
    :class "wifi_entry"
    :onclick "${EWW_CMD} update expanded_entry='${entry}' \
      ${expanded_entry.ssid == entry.ssid ? "" : "& ${EWW_CMD} update auth_dropdown=false"}"
    :onrightclick 
      {expanded_entry.ssid == entry.ssid ? 
        "${EWW_CMD} update expanded_entry='{}' & ${EWW_CMD} update auth_dropdown=false" : 
        ""}
    (box
      :orientation "v"
      :class "container ${entry.ssid == expanded_entry.ssid ? "expanded" : ""}"
      :space-evenly false
      (box
        :height 40
        :space-evenly false
        :spacing 10
        :class "label ${entry.active ? "active" : ""}"
        (label
          :xalign 0
          :text "${signal_symbol[(entry.strength - 1)]}")
        (label
          :xalign 0
          :text "${entry.ssid}"
          :limit-width 25)))))

(defwidget entry_handler []
  (box
    :class "entry_handler"
    :orientation "v"
    :space-evenly false
    (literal
      :content 
        {"${expanded_entry.active}" == "true" ? 
          "(entry_in_use :entry expanded_entry)" : 
          "(${entry_type["${expanded_entry.security}"]} :entry expanded_entry)"}))) 


(defvar username "")
(defvar password "")
(defwidget entry_invisible [entry] (box))

(defwidget entry_in_use [entry]
  (button
    :halign "end"
    :class "button"
    :timeout "1s"
    :onclick 'nmcli con down "${entry.con_name}" \
      && ${EWW_CMD} update wifi_info="$(${EWW_CONFIG_DIR}/network/query_wifi_info.sh)" \
      & ${EWW_CMD} update expanded_entry="{}"'
    (label
      :class "label"
      :text "Disconnect")))

(defwidget entry_known [entry]
  (box
    :space-evenly  false
    :spacing 20
    :halign "end"
    (button
      :class "button"
      :timeout "1s"
      :onclick 'nmcli con delete "${entry.con_name}" \
        && ${EWW_CMD} update wifi_info="$(${EWW_CONFIG_DIR}/network/query_wifi_info.sh)" \
        & ${EWW_CMD} update expanded_entry="{}"'
      (label
        :class "label"
        :text "Forget"))
    (button
      :class "button"
      :timeout "1s"
      :onclick 'nmcli con up "${entry.con_name}" \
        && ${EWW_CMD} update wifi_info="$(${EWW_CONFIG_DIR}/network/query_wifi_info.sh)" \
        & ${EWW_CMD} update expanded_entry="{}"'
      (label
        :class "label"
        :text "Connect"))))

(defwidget entry_no_security [entry]
  (button
    :halign "end"
    :class "button"
    :timeout "1s"
    :onclick '${EWW_CONFIG_DIR}/network/connect_wifi.sh \
      "${entry.ssid}" "${password}" "${EWW_CMD}" "${EWW_CONFIG_DIR}"'
    (label
      :class "label"
      :text "Connect")))

(defwidget entry_wpa_personal [entry]
  (box
    :orientation "v"
    :spacing 10
    :space-evenly false
    (box
      :space-evenly false
      :spacing 10
      (label
        :class "label"
        :text "Password:")
      (input
        :class "input"
        :timeout "2s"
        :onchange '${EWW_CMD} update password="{}"'
        :onaccept '${EWW_CONFIG_DIR}/network/connect_wifi.sh \
          "${entry.ssid}" "${password}" "${EWW_CMD}" "${EWW_CONFIG_DIR}"'
        :password true
        :hexpand true))
    (button
      :halign "end"
      :class "button"
      :timeout "2s"
      :onclick '${EWW_CONFIG_DIR}/network/connect_wifi.sh \
        "${entry.ssid}" "${password}" "${EWW_CMD}" "${EWW_CONFIG_DIR}"'
      (label
        :class "label"
        :text "Connect"))))

(defvar auth_methods '["ttls","peap","pwd","fast","leap"]')
(defvar auth_dropdown false)
(defvar current_auth "ttls")
(defwidget entry_wpa_enterprise [entry]
  (box
    :orientation "v"
    :space-evenly false
    (box
      :space-evenly false
      :spacing 10
      (label
        :class "label"
        :text "Auth:")
      (eventbox
        :hexpand true
        :cursor "pointer"
        :class "button ${auth_dropdown ? "flat_bottom" : ""}"
        :onclick 
          {auth_dropdown ? 
            "${EWW_CMD} update auth_dropdown=false" : 
            "${EWW_CMD} update auth_dropdown=true"} 
        (box
          :space-evenly false
          (label
            :width 30
            :class "label glyph"
            :text {auth_dropdown ? "" : ""})
          (box :hexpand true)
          (label
            :class "auth_label"
            :text current_auth))))
    (overlay
      (box
        :orientation "v"
        :space-evenly false
        :spacing 10
        (box :height 0)
        (box
          :space-evenly false
          :spacing 10
          (label
            :class "label"
            :text "Username:")
          (input
            :class "input"
            :timeout "2s"
            :onchange '${EWW_CMD} update username="{}"'
            :hexpand true))
        (box
          :space-evenly false
          :spacing 10
          (label
            :class "label"
            :text "Password:")
          (input
            :class "input"
            :timeout "2s"
            :onchange '${EWW_CMD} update password="{}"'
            :password true
            :hexpand true))
        (button
          :halign "end"
          :class "button"
          :onclick '${EWW_CONFIG_DIR}/network/connect_wifi_enterprise.sh \
            "${entry.ssid}" "${username}" "${password}" "${current_auth}" "${EWW_CMD}" "${EWW_CONFIG_DIR}"'
          (label
            :class "label"
            :text "Connect")))
      (revealer
        :valign "start"
        :reveal auth_dropdown
        :transition "slidedown"
        (box ;; padding
          :space-evenly false
          (box :width 55)
          (scroll
            :class "selection_box"
            :height 105
            :hexpand true
            :vscroll true
            :hscroll false
            (box
              :orientation "v"
              :space-evenly false
              :valign "start"
              (for method in auth_methods
                (eventbox
                  :class "button"
                  :cursor "pointer"
                  :onclick "${EWW_CMD} update current_auth=${method} & ${EWW_CMD} update auth_dropdown=false"
                  (label
                    :halign "end"
                    :class "auth_label"
                    :text method))))))))))
    
